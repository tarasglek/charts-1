---
- name: update and upgrade apt packages
  hosts: all
  remote_user: root
  tasks:
  - apt:
      update_cache: yes
      upgrade: full

- name: install docker from file
  hosts: all
  remote_user: root
  vars:
    docker_engine: "docker-engine_1.11.2-0~xenial_amd64.deb"
    docker_opts: "-H tcp://127.0.0.1:4243 -H unix:///var/run/docker.sock --dns 8.8.8.8 --dns 8.8.4.4 -g /data/docker"

  tasks:
  - name: Copy the Docker Debian package to the target
    copy: src={{FILES_DIR}}/{{docker_engine}} dest=/tmp

  - name: Copy the Docker Conmposer to the target
    copy: src=/mnt/share/eng/docker-compose-Linux-x86_64 dest=/usr/bin mode=0755

  - name: Install the Docker Debian package and all recommended (Ubuntu) packages
    apt:
      install_recommends: yes
      update_cache: yes
      deb: /tmp/{{docker_engine}}

  - name: Install prereqs
    shell: apt-get install -y apt-transport-https ca-certificates curl linux-image-extra-$(uname -r) xfsprogs multipath-tools util-linux socat python open-iscsi python-setuptools

  - name: install pure python rest lib
    shell: easy_install purestorage

  - name: enable iscsi
    shell: systemctl enable iscsid

  - name: Kubernetes apt config
    copy:
      content: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
      dest: /etc/apt/sources.list.d/kubernetes.list
      owner: root
      group: root
      mode: 0644

  - name: Slurp apt key
    shell:  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

  - name: Install k8s
    shell: apt-get update && apt-get install -y docker.io kubelet kubeadm kubectl kubernetes-cni

  - name: Kubelet attacher config
    copy:
      content: |
        [Service]
        Environment="KUBELET_EXTRA_ARGS=--enable-controller-attach-detach=false"
      dest: /etc/systemd/system/kubelet.service.d/15-node-override.conf

  - name: mkdir fstab entries
    shell: mkdir -p /state /setup
  - name: install helm
    shell: cd /tmp/ && curl https://storage.googleapis.com/kubernetes-helm/helm-v2.3.1-linux-amd64.tar.gz | tar -zxv && mv linux-amd64/helm /usr/local/bin
  - name: important fstab entries
    blockinfile:
      dest: /etc/fstab
      block: |
        LABEL=k8s-setup /setup ext4   ro,relatime,discard,noauto 0 0
        LABEL=k8s-state /state ext4   rw,relatime,discard,noauto 0 0

  - name: Init script
    copy:
      content: |
        [Unit]
        Wants=network-online.target
        After=network-online.target kubelet.target docker.target
        [Service]
        ExecStart=/bin/sh -c "mount /setup;mount /state;/setup/purestorage-k8s-services.py"
        Type=oneshot
        [Install]
        WantedBy=multi-user.target
      dest: /etc/systemd/system/setup-k8s.service

  - name: reload systemd
    shell: systemctl daemon-reload; systemctl enable setup-k8s

  - name: Copy the Docker gpg file
    apt_key:
      data: "{{lookup('file', 'docker.gpg')}}"
      state: present

  - name: Remove the package file
    file: path=/tmp/{{docker_engine}} state=absent

  - name: Set docker daemon options
    copy:
      content: "DOCKER_OPTS=\"{{docker_opts.rstrip('\n')}}\""
      dest: /etc/default/docker
      owner: root
      group: root
      mode: 0644
    notify:
      - Restart docker
    when: docker_opts != "" and ansible_distribution_version|version_compare(15.04, '<')

  - name: Create systemd configuration directory for Docker service (systemd)
    file:
      dest: /etc/systemd/system/docker.service.d
      state: directory
      owner: root
      group: root
      mode: 0755
    when: docker_opts != "" and ansible_distribution_version|version_compare(15.04, '>=')

  - name: Set docker daemon options (systemd)
    copy:
      content: |
        [Service]
        Environment="DOCKER_OPTS={{docker_opts.rstrip('\n')}}"
      dest: /etc/systemd/system/docker.service.d/env.conf
      owner: root
      group: root
      mode: 0644
    notify:
      - Reload systemd
      - Restart docker
    when: docker_opts != "" and ansible_distribution_version|version_compare(15.04, '>=')

  - name: Ensure docker daemon options used (systemd)
    template:
      src: docker.conf
      dest: /etc/systemd/system/docker.service.d/docker.conf
    notify:
      - Reload systemd
      - Restart docker
    when: docker_opts != "" and ansible_distribution_version|version_compare(15.04, '>=')

  - name: Check if /etc/updatedb.conf exists
    stat:
      path: /etc/updatedb.conf
    register: updatedb_conf_exists

  - name: Ensure updatedb does not index /var/lib/docker
    lineinfile:
      dest: /etc/updatedb.conf
      state: present
      backrefs: yes
      regexp: '^PRUNEPATHS="(/var/lib/docker )?(.*)"$'
      line: 'PRUNEPATHS="/var/lib/docker \2"'
    when: updatedb_conf_exists.stat.exists

  - name: Check if /etc/default/ufw exists
    stat:
      path: /etc/default/ufw
    register: ufw_default_exists

  - name: Change ufw default forward policy from drop to accept
    lineinfile:
      dest: /etc/default/ufw
      regexp: "^DEFAULT_FORWARD_POLICY="
      line: "DEFAULT_FORWARD_POLICY=\"ACCEPT\""
    when: ufw_default_exists.stat.exists

  - name: Add pureuser to docker group
    user: name=pureuser groups=docker

  - name: Create log directory for docker
    file:
      dest: /var/log/docker
      state: directory
      owner: root
      group: root
      mode: 0640

  - name: Create initial log file
    shell: docker stats --no-stream > /var/log/docker/stats.log

  - name: Add statistics collector cronjob
    copy:
      content: |
        0-59/5 * * * * root docker stats --no-stream | sed 1d >> /var/log/docker/stats.log
        0-59/5 * * * * root docker events --since 5m --until 0m >> /var/log/docker/events.log
      dest: /etc/cron.d/docker_stats
      owner: root
      group: root
      mode: 0644

  - name: Add statistics collector logrotate
    copy:
      src: docker_logrotate
      dest: /etc/logrotate.d/docker
      owner: root
      group: root
      mode: 0644

  handlers:
  - name: Start Docker
    service: name=docker state=started

  - name: Reload systemd
    command: systemctl daemon-reload

  - name: Restart docker
    service: name=docker state=restarted

  - name: Restart dockerio
    service: name=docker.io state=restarted

- name: Setup resolv.conf
  hosts: all
  remote_user: root
  roles:
  - ansible-resolv

- name: Update dhclient settings
  hosts: all
  remote_user: root
  tasks:
  - lineinfile: dest=/etc/dhcp/dhclient.conf state=present regexp='^timeout ' line='timeout 30;'
  - lineinfile: dest=/etc/dhcp/dhclient.conf state=present regexp='reboot ' line='reboot 0;'
  - lineinfile: dest=/etc/dhcp/dhclient.conf state=present regexp='retry ' line='retry 30;'
  - lineinfile: dest=/etc/dhcp/dhclient.conf state=present regexp='initial-interval ' line='initial-interval 1;'
  - lineinfile: dest=/etc/dhcp/dhclient.conf state=present regexp='backoff-cutoff ' insertafter='initial-interval' line='backoff-cutoff 2;'

- name: Modify logrotate
  hosts: all
  remote_user: root
  tasks:
  - name: Copy logrotate from cron.daily to cron.hourly
#    copy: remote_src=True src=/etc/cron.daily/logrotate dest=/etc/cron.hourly/logrotate
    shell: /bin/cp /etc/cron.daily/logrotate /etc/cron.hourly/logrotate

  - name: Remove any logrotate from cron.daily
    file: path=/etc/cron.daily/logrotate state=absent

  - name: Use 'dateext' in logrotate for first entry (syslog only)
    lineinfile: dest=/etc/logrotate.d/rsyslog state=present regexp='rotate 7' line='\trotate 168'
    lineinfile: dest=/etc/logrotate.d/rsyslog state=present regexp='daily' line='\thourly'
    lineinfile: dest=/etc/logrotate.d/rsyslog state=present regexp='dateext' insertafter='hourly' line='\tdateext'

  - name: Overwrite logrotate for apt
    copy:
      src: apt_logrotate
      dest: /etc/logrotate.d/apt
      owner: root
      group: root
      mode: 0644

- name: install puragent
  hosts: all
  remote_user: root
  tasks:
  - copy: src={{WORKSPACE}}/pureagent_1.0.0.deb dest=/tmp
  - apt:
      deb: /tmp/pureagent_1.0.0.deb
  - service: name=pureagent enabled=yes

- name: reset source.list to point to ubuntu
  hosts: all
  remote_user: root
  tasks:
  - command: sed -i 's/apt-svc.dev.purestorage.com[^ ]*/us.archive.ubuntu.com\/ubuntu/g' /etc/apt/sources.list

- name: clean up
  hosts: all
  remote_user: root
  tasks:
  - shell: /bin/rm -fr /var/log/*.log
  - shell: /bin/rm -fr /var/lib/apt/lists/apt-svc*

- name: disable root log-in, allow to
  hosts: all
  remote_user: root
  tasks:
  - command: passwd -dl root
  - command: sed -i 's/#AuthorizedKeysFile.*/AuthorizedKeysFile      %h\/.ssh\/authorized_keys \/etc\/ssh\/pure_authorized_keys/g' /etc/ssh/sshd_config
#  - command: sed -i 's/PermitRootLogin.*/PermitRootLogin no/g' /etc/ssh/sshd_config
#  - command: sed -i 's/.*PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config
